(ns seven-tasks.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def router
  (reitit/router
    [["/" :index]
     ["/tasks"
      ;; ["" :items]
      ["/:task-id" :task]]
     ["/click-counter" :click-counter]
     ["/temperature-converter" :temperature-converter]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Seven-tasks"]
     [:ul
      [:li {:name "Click Counter" :key "task-1"}
       [:a {:href (path-for :click-counter)} "Task 1, Click Counter"]]
      [:li {:name "Temperature Converter" :key "task-2"}
       [:a {:href (path-for :temperature-converter)} "Task 2, Temperature Converter"]]
      (map (fn [task-id]
             [:li {:name (str "task-" task-id) :key (str "task-" task-id)}
              [:a {:href (path-for :task {:task-id task-id})} "Task: " task-id]])
           (range 2 8))]]))


(defn task-page []
  (fn []
    (let [routing-data (session/get :route)
          task (get-in routing-data [:route-params :task-id])]
      [:span.main
       [:h1 (str "Task " task " of seven-tasks")]
       [:p [:a {:href (path-for :tasks)} "Back to the list of tasks"]]])))

(defn click-counter-page []
  (let [clicks (reagent/atom 0)]
    (fn []
      [:span.main
       [:h1 "Task 1, Click Counter"]
       [:p "There have been " @clicks " clicks"]
       [:input {:type "button"
                :value "Click me"
                :on-click #(swap! clicks inc)}]
       [:p [:a {:href (path-for :index)} "Back to the list of tasks"]]])))

(defn c->f [centigrade]
  (+ 32 (* (/ 9 5) centigrade)))

(defn f->c [farenheit]
  (* (/ 5 9) (- farenheit 32)))

(defn temperature-converter-page []
  (let [temperature-centigrade (reagent/atom 0)]
    (fn []
      [:span.main
       [:h1 "Task 2, Temperature Converter"]
       [:p "Convert Centigrade to Farenheit and vice versa"]
       [:input {:type "text"
                :value @temperature-centigrade
                :on-change #(reset! temperature-centigrade (-> % .-target .-value))}]
       [:p @temperature-centigrade " Centigrade"]
       [:p (c->f @temperature-centigrade) " Farenheit"]])))

(defn about-page []
  (fn [] [:span.main
         [:h1 "Seven-tasks"]
         [:p "Test tasks, solved by Iain Wood"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :task #'task-page
    :click-counter #'click-counter-page
    :temperature-converter #'temperature-converter-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About seven-tasks"]]]
       [page]
       [:footer
        [:p "seven-tasks was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (let [match (reitit/match-by-path router path)
             current-page (:name (:data  match))
             route-params (:path-params match)]
         (reagent/after-render clerk/after-render!)
         (session/put! :route {:current-page (page-for current-page)
                               :route-params route-params})
         (clerk/navigate-page! path)
         ))
     :path-exists?
     (fn [path]
       (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
